syntax = "proto3";
import "clientbound_player.proto";
import "data_type.proto";

option java_package = "com.mcdiamondfire.proto.messages.clientbound.plot";
option java_multiple_files = true;

// Sent when the player joins a plot.
message S2CPlotInfo {
	// Represents a player in a plot.
	message PlotPlayer {
		string user_name = 1; // The name of the player.
		string user_uuid = 2; // The UUID of the player (36 characters including dashes).
		bool is_owner = 3; // Whether the player is the owner of the plot.
		bool is_developer = 4; // Whether the player has developer permissions on the plot.
		bool is_builder = 5; // Whether the player has builder permissions on the plot.
		PlayerMode mode = 6; // The mode the player is in.
	}

	// Represents a tag, also known as a category, a plot can have.
	enum PlotTag {
		ARCADE = 0; // One or multiple fast and fun minigames!
		VERSUS = 1; // Compete with other players!
		COMBAT = 2; // Fight your enemies!
		PARKOUR = 3; // Prove your platforming skills!
		ADVENTURE = 4; // Games with many places to explore!
		ROLEPLAY = 5; // Become part of an immersive setting or story!
		STRATEGY = 6; // Plan your next moves to be victorious!
		PUZZLE = 7; // Put your mind to the test!
		TRIVIA = 8; // Try to guess the correct answers!
		RESOURCES = 9; // Games where you collect resources to advance!
		ELIMINATION = 10; // Be the last one standing!
		CREATION = 11; // Games in which you can express your creativity!
		MISCELLANEOUS = 12; // Plots that don't really fit the other categories!
	}

	int32 id = 1; // The identifier of the plot.
	string name = 2; // The name of the plot as a serialized component in JSON format.
	string owner_name = 3; // The name of the owner of the plot.
	string owner_uuid = 4; // The UUID of the owner of the plot (36 characters including dashes).
	int32 plot_size = 5; // The size of the plot (1 = Basic, 2 = Large, 3 = Massive, 4 = Mega).
	int32 plot_min_x = 6; // The minimum X coordinate of the plot.
	int32 plot_min_z = 7; // The minimum Z coordinate of the plot.
	double spawn_pos_x = 8; // The spawn X coordinate of the plot.
	double spawn_pos_y = 9; // The spawn Y coordinate of the plot.
	double spawn_pos_z = 10; // The spawn Z coordinate of the plot.
	bool is_owner = 11; // Whether the player is the owner of the plot.
	bool is_developer = 12; // Whether the player has developer permissions on the plot, is an administrator, or is the support member in a session.
	bool is_builder = 13; // Whether the player has builder permissions on the plot, is an administrator, or is the support member in a session.
	repeated PlotTag tags = 14; // The tags of this plot (e.g. "adventure", "combat", ...).
	string handle = 15; // The handle of the plot, or empty if none is set.
	repeated PlotPlayer players = 16; // The players currently on the plot.
}

// Sent as a response to a C2SGetTemplate message,
// error is true if the player does not have developer permissions on the plot,
// or if the location is not a valid code block position
message S2CCodeTemplate {
	oneof response {
		string json = 1; // The template as a JSON string.
		bool error = 2; // Whether an error occurred while getting the template.
	}
}

// Sent as a response to a C2SPlaceTemplate message,
// error is true if the player does not have developer permissions on the plot,
// or if the location is not a valid code block position,
// or if the template overrides any blocks / exits the plot bounds.
message S2CPlaceTemplateResult {
	bool error = 1; // Whether an error occurred while placing the template.
}
