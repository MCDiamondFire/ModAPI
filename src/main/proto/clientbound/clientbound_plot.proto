syntax = "proto3";
import "common/data_type.proto";
import "common/common_player.proto";
import "common/common_plot.proto";

option java_package = "com.mcdiamondfire.proto.messages.clientbound.plot";
option java_multiple_files = true;

// Sent when the player joins a plot.
message S2CPlotInfo {
  // Represents a player in a plot.
  message PlotPlayer {
    string user_name = 1; // The name of the player.
    string user_uuid = 2; // The UUID of the player (36 characters including dashes).
    bool is_owner = 3; // Whether the player is the owner of the plot.
    bool is_developer = 4; // Whether the player has developer permissions on the plot.
    bool is_builder = 5; // Whether the player has builder permissions on the plot.
    PlayerMode mode = 6; // The mode the player is in.
  }

  int32 id = 1; // The identifier of the plot.
  string name = 2; // The name of the plot as a serialized component in JSON format.
  string owner_name = 3; // The name of the owner of the plot.
  string owner_uuid = 4; // The UUID of the owner of the plot (36 characters including dashes).
  int32 plot_size = 5; // The size of the plot (1 = Basic, 2 = Large, 3 = Massive, 4 = Mega).
  Region build_region = 6; // The build region of the plot.
  Region code_region = 7; // The code region of the plot.
  Region spawn_pos = 8; // The spawn location of the plot.
  bool is_owner = 11; // Whether the player is the owner of the plot.
  bool is_developer = 12; // Whether the player has developer permissions on the plot, is an administrator, or is the support member in a session.
  bool is_builder = 13; // Whether the player has builder permissions on the plot, is an administrator, or is the support member in a session.
  repeated PlotTag tags = 14; // The tags of this plot (e.g. "adventure", "combat", ...).
  string handle = 15; // The handle of the plot, or empty if none is set.
  repeated PlotPlayer players = 16; // The players currently on the plot.
}

// Sent as a response to a C2SCodeOperation message,
// error is true if the operation failed (see each operation for details),
// template is not empty only if a get operation succeeded.
message S2CCodeOperationResult {
  // Represents an error that occurred while performing a code operation.
  enum Error {
    NONE = 0; // No error, the operation succeeded.
    NO_PERMISSION = 1; // The player does not have developer permissions on the plot.
    NO_LOCATION = 2; // No location was provided for an operation that requires one.
    INVALID_LOCATION = 3; // The provided location is not within the code region of the plot or is an invalid code block position.
    NO_ACTION = 4; // No action was provided for an operation that requires one.
    ACTION_NOT_FOUND = 5; // The provided action or line starter was not found on the plot.
    NO_LOCATION_OR_TEMPLATE = 6; // Either a location or a template were not provided for an operation that requires both.
    INVALID_LOCATION_OR_TEMPLATE = 7; // The provided location is invalid or the provided template is not a valid code template.
    TEMPLATE_NOT_FIT = 8; // The provided template does not fit in the code region at the provided location.
    INVALID_TEMPLATE = 10; // The provided template is not a valid code template.
    INTERNAL_ERROR = 9; // An internal error occurred while performing the operation.
    NO_OPERATION = 11; // No operation was provided.
  }

  oneof result {
    Error error = 1; // true if the operation failed, false otherwise
    string template = 2; // The template JSON string, only if a get operation succeeded.
  }
}

// Sent as a response to a C2SMultiCodeOperations message,
// contains the results of all operations requested.
message S2CMultiCodeOperationsResult {
  repeated S2CCodeOperationResult results = 1; // The results of all operations requested.
}

// Sent when the player joins a plot,
// requires the player to have developer permissions on the plot.
message S2CPlotLineStarters {
  repeated CodeLineStarter line_starter = 1; // The line starters on the plot.
}

// Sent when a line starter is added or removed from the plot,
// requires the player to have developer permissions on the plot.
message S2CPlotLineStarterUpdate {
  // Represents an action performed on a line starter.
  enum Action {
    ADD = 0; // A line starter was added.
    CHANGE = 1; // A line starter was changed.
    REMOVE = 2; // A line starter was removed.
  }
  CodeLineStarter line_starter = 1; // The line starter that was added or removed.
  Action action = 2; // The action performed.
}

// Sent when the plot finishes a lag measurement,
// requires the player to have developer permissions on the plot,
// and be profiling the plot.
message S2CPlotProfiling {
  int32 cpu_usage = 1; // The CPU usage of the plot in percentage (0 to 100).
}
